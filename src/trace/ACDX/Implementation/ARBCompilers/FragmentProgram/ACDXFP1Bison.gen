/* A Bison parser, made by GNU Bison 3.5.1.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Undocumented macros, especially those whose name start with YY_,
   are private implementation details.  Do not rely on them.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.5.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         acdxfp1parse
#define yylex           acdxfp1lex
#define yyerror         acdxfp1error
#define yydebug         acdxfp1debug
#define yynerrs         acdxfp1nerrs
#define yylval          acdxfp1lval
#define yychar          acdxfp1char

/* First part of user prologue.  */
#line 14 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"

#include <string>
#include <sstream>

using namespace std;

int yylex();

#include "ACDXIRNode.h"

using namespace acdlib::GenerationCode;
using namespace acdlib;

#ifndef YYDEBUG
    #define YYDEBUG 0
#endif

#define APPEND_STR(str,str1)                       { (str).append(str1); }
#define APPEND_NUMBER_SELECTION(string,number)     { stringstream ss; ss << "[" << number << "]"; (string).append(ss.str()); }
#define APPEND_ROW_RANGE_SELECTION(string,min,max) { stringstream ss; ss << "[" << min << ".." << max << "]"; (string).append(ss.str()); }
#define STRING_TO_VAR(str, var)                    { stringstream ss(str, ios::in); ss >> var; }

#define CREATE_STRING(str_ptr,TEXT)                { (str_ptr) = new string(TEXT); acdxFp1ASTStringCollector.push_back(str_ptr); }

#define CREATE_EMPTY_STRING(str_ptr)               CREATE_STRING(str_ptr, "")


void yyerror(void*, char *s)
{
    panic("ACDXFP1Grammar.y","yyerror()","Sintactic error in Fragment Program");
}

typedef struct{
  string* texto;
  int linea;
} type_token_atrib;  

list<string*> acdxFp1LexSymbolCollector;

list<string*> acdxFp1ASTStringCollector;


#line 120 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif


/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif
#if YYDEBUG
extern int acdxfp1debug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    TOK_ARBFP10_HEADER = 258,
    TOK_OPTION = 259,
    TOK_PARAM = 260,
    TOK_ATTRIB = 261,
    TOK_TEMP = 262,
    TOK_OUTPUT = 263,
    TOK_ALIAS = 264,
    TOK_ABS = 265,
    TOK_ADD = 266,
    TOK_CMP = 267,
    TOK_COS = 268,
    TOK_DP3 = 269,
    TOK_DP4 = 270,
    TOK_DPH = 271,
    TOK_DST = 272,
    TOK_EX2 = 273,
    TOK_FLR = 274,
    TOK_FRC = 275,
    TOK_KIL = 276,
    TOK_KLS = 277,
    TOK_CMPKIL = 278,
    TOK_CHS = 279,
    TOK_ZXP = 280,
    TOK_ZXS = 281,
    TOK_LG2 = 282,
    TOK_LIT = 283,
    TOK_LRP = 284,
    TOK_MAD = 285,
    TOK_MAX = 286,
    TOK_MIN = 287,
    TOK_MOV = 288,
    TOK_MUL = 289,
    TOK_FXMUL = 290,
    TOK_FXMAD = 291,
    TOK_FXMAD2 = 292,
    TOK_POW = 293,
    TOK_RCP = 294,
    TOK_RSQ = 295,
    TOK_SIN = 296,
    TOK_SCS = 297,
    TOK_SGE = 298,
    TOK_SLT = 299,
    TOK_SUB = 300,
    TOK_SWZ = 301,
    TOK_TEX = 302,
    TOK_TXB = 303,
    TOK_TXP = 304,
    TOK_XPD = 305,
    TOK_ABS_SAT = 306,
    TOK_ADD_SAT = 307,
    TOK_CMP_SAT = 308,
    TOK_COS_SAT = 309,
    TOK_DP3_SAT = 310,
    TOK_DP4_SAT = 311,
    TOK_DPH_SAT = 312,
    TOK_DST_SAT = 313,
    TOK_EX2_SAT = 314,
    TOK_FLR_SAT = 315,
    TOK_FRC_SAT = 316,
    TOK_LG2_SAT = 317,
    TOK_LIT_SAT = 318,
    TOK_LRP_SAT = 319,
    TOK_MAD_SAT = 320,
    TOK_MAX_SAT = 321,
    TOK_MIN_SAT = 322,
    TOK_MOV_SAT = 323,
    TOK_MUL_SAT = 324,
    TOK_POW_SAT = 325,
    TOK_RCP_SAT = 326,
    TOK_RSQ_SAT = 327,
    TOK_SIN_SAT = 328,
    TOK_SCS_SAT = 329,
    TOK_SGE_SAT = 330,
    TOK_SLT_SAT = 331,
    TOK_SUB_SAT = 332,
    TOK_SWZ_SAT = 333,
    TOK_TEX_SAT = 334,
    TOK_TXB_SAT = 335,
    TOK_TXP_SAT = 336,
    TOK_XPD_SAT = 337,
    TOK_PROGRAM = 338,
    TOK_RESULT = 339,
    TOK_STATE = 340,
    TOK_FRAGMENT = 341,
    TOK_TEXTURE = 342,
    TOK_SAMPLE = 343,
    TOK_COLOR = 344,
    TOK_PRIMARY = 345,
    TOK_SECONDARY = 346,
    TOK_TEXCOORD = 347,
    TOK_FOGCOORD = 348,
    TOK_POSITION = 349,
    TOK_ATTRIB_M = 350,
    TOK_ENV = 351,
    TOK_LOCAL = 352,
    TOK_MATERIAL = 353,
    TOK_AMBIENT = 354,
    TOK_DIFFUSE = 355,
    TOK_SPECULAR = 356,
    TOK_EMISSION = 357,
    TOK_SHININESS = 358,
    TOK_FRONT = 359,
    TOK_BACK = 360,
    TOK_LIGHT = 361,
    TOK_SPOT = 362,
    TOK_DIRECTION = 363,
    TOK_HALF = 364,
    TOK_ATTENUATION = 365,
    TOK_LIGHTMODEL = 366,
    TOK_SCENECOLOR = 367,
    TOK_LIGHTPROD = 368,
    TOK_TEXENV = 369,
    TOK_FOG = 370,
    TOK_PARAMS = 371,
    TOK_DEPTH = 372,
    TOK_RANGE = 373,
    TOK_MATRIX = 374,
    TOK_MODELVIEW = 375,
    TOK_PROJECTION = 376,
    TOK_MVP = 377,
    TOK_PALETTE = 378,
    TOK_INVERSE = 379,
    TOK_TRANSPOSE = 380,
    TOK_INVTRANS = 381,
    TOK_ROW = 382,
    TOK_POINT_POINT = 383,
    TOK_INT_CONST = 384,
    TOK_FLOAT_CONST = 385,
    TOK_IDENT = 386,
    TOK_COMPONENT = 387,
    TOK_1D = 388,
    TOK_2D = 389,
    TOK_3D = 390,
    TOK_CUBE = 391,
    TOK_RECT = 392,
    TOK_END = 393
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 56 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
         
  type_token_atrib                          token_atrib;
  string*                                   str;
  float                                     floatconst;
  int                                       intconst;
  bool                                      boolean;
  list<string>*                             strlist;
  list<IROption*>*                          optlist;
  list<IRStatement*>*                       stmntlist;
  list<IRParamBinding*>*                    pbindlist;
  ACDXIRNode*                               irnode;
  IRProgram*                                irprogram;
  IROption*                                 iroption;
  IRStatement*                              irstatement;
  IRInstruction*                            irinstruction;
  IRSampleInstruction*                      irsamplinstr;
  IRKillInstruction*                        irkillinstr;
  IRZExportInstruction*						irzxpinstr;
  IRSwizzleInstruction*                     irswzinstr;
  IRSwizzleComponents*                      irswzcomps;
  IRSwizzleComponents::swzComponent         irswzcomp;
  IRDstOperand*                             irdstoperand;
  IRSrcOperand*                             irsrcoperand;
  IRALIASStatement*                         iraliasstmnt;
  IRTEMPStatement*                          irtempstmnt;
  IRATTRIBStatement*                        irattrstmnt;
  IROUTPUTStatement*                        iroutputstmnt;
  IRPARAMStatement*                         irparamstmnt;
  IRParamBinding*                           irparambind;
  IRLocalEnvBinding*                        irlocalenvbind;

#line 340 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif


extern YYSTYPE acdxfp1lval;

int acdxfp1parse (void* irtree);





#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))

/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  5
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   570

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  148
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  125
/* YYNRULES -- Number of rules.  */
#define YYNRULES  281
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  444

#define YYUNDEFTOK  2
#define YYMAXUTOK   393


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   147,   140,   146,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,   139,
       2,   143,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   141,     2,   142,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   144,     2,   145,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   162,   162,   167,   173,   179,   183,   188,   194,   198,
     202,   212,   216,   220,   225,   229,   233,   237,   241,   245,
     250,   254,   258,   263,   268,   278,   282,   286,   290,   294,
     298,   302,   306,   310,   314,   319,   329,   333,   337,   341,
     345,   349,   353,   357,   361,   365,   369,   373,   377,   381,
     386,   398,   402,   407,   419,   423,   427,   431,   435,   439,
     443,   447,   451,   455,   459,   463,   467,   471,   475,   479,
     484,   488,   492,   496,   500,   504,   508,   512,   516,   521,
     536,   540,   544,   548,   552,   556,   560,   565,   570,   575,
     587,   591,   596,   609,   613,   617,   621,   625,   629,   634,
     640,   649,   655,   664,   669,   674,   679,   684,   689,   696,
     699,   704,   713,   720,   727,   733,   745,   750,   755,   762,
     767,   772,   778,   784,   789,   795,   800,   805,   811,   815,
     820,   835,   838,   843,   874,   878,   882,   886,   890,   895,
     902,   907,   914,   921,   926,   931,   939,   946,   950,   955,
     962,   971,   974,   982,   988,   993,   998,  1004,  1008,  1012,
    1017,  1022,  1027,  1033,  1037,  1041,  1046,  1050,  1055,  1059,
    1063,  1067,  1071,  1075,  1079,  1083,  1088,  1097,  1102,  1107,
    1112,  1117,  1123,  1132,  1137,  1142,  1147,  1152,  1157,  1164,
    1170,  1176,  1184,  1189,  1197,  1208,  1213,  1218,  1224,  1229,
    1238,  1245,  1248,  1253,  1258,  1266,  1271,  1277,  1285,  1291,
    1300,  1309,  1313,  1321,  1331,  1335,  1340,  1345,  1350,  1356,
    1361,  1368,  1373,  1378,  1385,  1392,  1401,  1404,  1409,  1415,
    1418,  1423,  1428,  1433,  1438,  1442,  1447,  1451,  1456,  1462,
    1467,  1473,  1480,  1486,  1491,  1497,  1504,  1509,  1514,  1518,
    1523,  1527,  1532,  1537,  1542,  1546,  1551,  1557,  1565,  1572,
    1575,  1579,  1584,  1591,  1594,  1600,  1607,  1612,  1619,  1623,
    1628,  1635,  1639,  1644,  1650,  1657,  1662,  1667,  1673,  1679,
    1684,  1688
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "TOK_ARBFP10_HEADER", "TOK_OPTION",
  "TOK_PARAM", "TOK_ATTRIB", "TOK_TEMP", "TOK_OUTPUT", "TOK_ALIAS",
  "TOK_ABS", "TOK_ADD", "TOK_CMP", "TOK_COS", "TOK_DP3", "TOK_DP4",
  "TOK_DPH", "TOK_DST", "TOK_EX2", "TOK_FLR", "TOK_FRC", "TOK_KIL",
  "TOK_KLS", "TOK_CMPKIL", "TOK_CHS", "TOK_ZXP", "TOK_ZXS", "TOK_LG2",
  "TOK_LIT", "TOK_LRP", "TOK_MAD", "TOK_MAX", "TOK_MIN", "TOK_MOV",
  "TOK_MUL", "TOK_FXMUL", "TOK_FXMAD", "TOK_FXMAD2", "TOK_POW", "TOK_RCP",
  "TOK_RSQ", "TOK_SIN", "TOK_SCS", "TOK_SGE", "TOK_SLT", "TOK_SUB",
  "TOK_SWZ", "TOK_TEX", "TOK_TXB", "TOK_TXP", "TOK_XPD", "TOK_ABS_SAT",
  "TOK_ADD_SAT", "TOK_CMP_SAT", "TOK_COS_SAT", "TOK_DP3_SAT",
  "TOK_DP4_SAT", "TOK_DPH_SAT", "TOK_DST_SAT", "TOK_EX2_SAT",
  "TOK_FLR_SAT", "TOK_FRC_SAT", "TOK_LG2_SAT", "TOK_LIT_SAT",
  "TOK_LRP_SAT", "TOK_MAD_SAT", "TOK_MAX_SAT", "TOK_MIN_SAT",
  "TOK_MOV_SAT", "TOK_MUL_SAT", "TOK_POW_SAT", "TOK_RCP_SAT",
  "TOK_RSQ_SAT", "TOK_SIN_SAT", "TOK_SCS_SAT", "TOK_SGE_SAT",
  "TOK_SLT_SAT", "TOK_SUB_SAT", "TOK_SWZ_SAT", "TOK_TEX_SAT",
  "TOK_TXB_SAT", "TOK_TXP_SAT", "TOK_XPD_SAT", "TOK_PROGRAM", "TOK_RESULT",
  "TOK_STATE", "TOK_FRAGMENT", "TOK_TEXTURE", "TOK_SAMPLE", "TOK_COLOR",
  "TOK_PRIMARY", "TOK_SECONDARY", "TOK_TEXCOORD", "TOK_FOGCOORD",
  "TOK_POSITION", "TOK_ATTRIB_M", "TOK_ENV", "TOK_LOCAL", "TOK_MATERIAL",
  "TOK_AMBIENT", "TOK_DIFFUSE", "TOK_SPECULAR", "TOK_EMISSION",
  "TOK_SHININESS", "TOK_FRONT", "TOK_BACK", "TOK_LIGHT", "TOK_SPOT",
  "TOK_DIRECTION", "TOK_HALF", "TOK_ATTENUATION", "TOK_LIGHTMODEL",
  "TOK_SCENECOLOR", "TOK_LIGHTPROD", "TOK_TEXENV", "TOK_FOG", "TOK_PARAMS",
  "TOK_DEPTH", "TOK_RANGE", "TOK_MATRIX", "TOK_MODELVIEW",
  "TOK_PROJECTION", "TOK_MVP", "TOK_PALETTE", "TOK_INVERSE",
  "TOK_TRANSPOSE", "TOK_INVTRANS", "TOK_ROW", "TOK_POINT_POINT",
  "TOK_INT_CONST", "TOK_FLOAT_CONST", "TOK_IDENT", "TOK_COMPONENT",
  "TOK_1D", "TOK_2D", "TOK_3D", "TOK_CUBE", "TOK_RECT", "TOK_END", "';'",
  "','", "'['", "']'", "'='", "'{'", "'}'", "'-'", "'+'", "$accept",
  "program", "ARBFP10_program", "optionSequence", "option",
  "statementSequence", "statement", "instruction", "ALUInstruction",
  "TexInstruction", "CHS_Instruction", "VECTORop_instruction", "VECTORop",
  "SCALARop_instruction", "SCALARop", "BINSCop_instruction", "BINSCop",
  "BINop_instruction", "BINop", "TRIop_instruction", "TRIop",
  "SWZ_instruction", "SWZop", "SAMPLE_instruction", "SAMPLEop",
  "KIL_instruction", "ZXP_instruction", "texImageUnit", "texTarget",
  "optTexImageUnitNum", "texImageUnitNum", "scalarSrcReg", "vectorSrcReg",
  "maskedDstReg", "extendedSwizzle", "ExtSwizSel", "srcReg", "dstReg",
  "progParamReg", "progParamArray", "progParamArrayAbs", "scalarSuffix",
  "optionalSuffix", "xyzw_rgbaComponent", "optionalMask", "xyzw_rgbaMask",
  "namingStatement", "ATTRIB_statement", "fragAttribBinding",
  "fragAttribItem", "fragAttribNum", "PARAM_statement", "PARAM_singleStmt",
  "PARAM_multipleStmt", "optArraySize", "paramSingleInit",
  "paramMultipleInit", "paramMultInitList", "paramSingleItemDecl",
  "paramSingleItemUse", "paramMultipleItem", "stateMultipleItem",
  "stateSingleItem", "stateMaterialItem", "stateMatProperty",
  "stateLightItem", "stateLightProperty", "stateSpotProperty",
  "stateLightModelItem", "stateLModProperty", "stateLightProdItem",
  "stateLProdProperty", "stateLightNumber", "stateTexEnvItem",
  "stateTexEnvProperty", "optLegacyTexUnitNum", "legacyTexUnitNum",
  "stateFogItem", "stateFogProperty", "stateDepthItem",
  "stateDepthProperty", "stateMatrixRow", "stateMatrixRows",
  "optMatrixRows", "stateMatrixItem", "stateOptMatModifier",
  "stateMatModifier", "stateMatrixRowNum", "stateMatrixName",
  "stateOptModMatNum", "stateModMatNum", "optTexCoordNum", "texCoordNum",
  "statePaletteMatNum", "stateProgramMatNum", "programSingleItem",
  "programMultipleItem", "progEnvParams", "progEnvParamNums",
  "progEnvParam", "progLocalParams", "progLocalParamNums",
  "progLocalParam", "progEnvParamNum", "progLocalParamNum",
  "paramConstDecl", "paramConstUse", "paramConstScalarDecl",
  "paramConstScalarUse", "paramConstVector", "signedFloatConstant",
  "optionalSign", "TEMP_statement", "varNameList", "OUTPUT_statement",
  "resultBinding", "optFaceType", "optColorType", "ALIAS_statement",
  "establishName", "establishedName", "identifier", "component", "integer",
  "floatConstant", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_int16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    59,
      44,    91,    93,    61,   123,   125,    45,    43
};
# endif

#define YYPACT_NINF (-384)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-126)

#define yytable_value_is_error(Yyn) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
      37,  -384,    50,  -384,    68,  -384,   -51,  -384,   432,  -384,
     -46,   -51,   -51,   -51,   -51,   -51,  -384,  -384,  -384,  -384,
    -384,  -384,  -384,  -384,  -384,  -384,  -384,   -64,   -64,  -384,
    -384,   -64,   -64,  -384,  -384,  -384,  -384,  -384,  -384,  -384,
    -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,
    -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,
    -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,
    -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,
    -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,
    -384,   -38,  -384,  -384,  -384,  -384,   -58,  -384,   -58,  -384,
     -58,  -384,   -58,  -384,   -58,  -384,   -58,  -384,   -58,  -384,
    -384,   -26,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,
     -95,  -384,   -23,  -384,   -21,    -2,  -384,  -384,  -384,   -52,
       3,  -384,    11,  -384,   -54,    12,    21,  -384,  -384,  -384,
      16,    17,    18,    19,    26,    29,  -384,   -44,   -60,  -384,
      85,    33,    70,   -51,    42,   -59,    14,  -384,  -384,   -64,
      21,  -384,    34,  -384,  -384,  -384,  -384,  -384,  -384,  -384,
    -384,  -384,    43,  -384,    95,    97,  -384,  -384,   -64,  -384,
    -384,  -384,  -384,   -64,   -64,   -64,   -64,   -52,   -64,  -384,
      44,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,     2,
    -384,   -51,  -384,  -384,    47,    48,    41,    52,    13,    53,
      60,   -47,    84,   -55,  -384,  -384,  -384,  -384,  -384,  -384,
    -384,  -384,    76,    20,    67,  -384,  -384,    69,  -384,   -96,
    -384,  -384,   -44,    71,    72,  -384,  -384,   -52,    64,    75,
      77,    78,    79,    66,  -384,  -384,   -44,   -44,  -384,  -384,
      62,   -44,  -384,  -384,    99,   -44,   -44,   125,  -384,  -384,
    -384,  -384,  -384,    80,    67,    81,  -384,  -384,    82,   -27,
      83,  -384,  -384,  -384,   -44,  -384,   -44,   -64,  -384,    86,
    -384,   -44,   -44,    21,   -64,   -64,   -64,   -64,   129,    87,
    -384,    90,  -384,    91,  -384,  -384,  -384,  -384,  -384,  -384,
    -384,    92,  -384,  -384,    93,    94,  -384,  -384,  -384,   -44,
    -384,   -44,  -384,   -44,  -384,  -384,  -384,  -384,  -384,   -44,
      96,  -384,    98,  -384,   -69,  -384,   100,   102,  -384,  -384,
    -384,  -384,    89,  -384,   -67,   104,   101,   -56,  -384,  -384,
      -5,    41,  -384,   105,  -384,   106,  -384,   107,  -384,   108,
    -384,  -384,  -384,   -64,  -384,  -384,  -384,   -64,   111,  -384,
    -384,  -384,   -44,  -384,    63,    51,   -59,   -19,  -384,  -384,
    -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,   112,
    -384,  -384,  -384,    35,  -384,  -384,  -384,  -384,   -12,  -384,
     -64,   110,  -384,  -384,  -384,  -384,  -384,  -384,  -384,   113,
     114,  -384,   119,   -56,  -384,  -384,  -384,  -384,  -384,  -384,
    -384,   -64,  -384,   -67,  -384,   -44,   -44,   118,  -384,  -384,
     115,   121,   120,   109,   123,   138,   -44,  -384,   -64,  -384,
     -44,  -384,   -44,   -85,   -67,  -384,  -384,   -44,   130,   127,
     -64,  -384,   -67,  -384
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_int16 yydefact[] =
{
       0,     5,     0,     2,     8,     1,     0,     4,     0,   277,
       0,     0,     0,     0,     0,     0,    25,    54,    80,    36,
      56,    58,    60,    62,    38,    27,    29,   259,   259,    82,
      23,   259,   259,    40,    31,    83,    85,    64,    66,    33,
      68,    69,    86,    87,    51,    42,    44,    46,    48,    71,
      73,    75,    90,    93,    97,    95,    77,    26,    55,    81,
      37,    57,    59,    61,    63,    39,    28,    30,    41,    32,
      84,    88,    65,    67,    34,    70,    52,    43,    45,    47,
      49,    72,    74,    76,    91,    94,    98,    96,    78,     3,
       7,     0,    11,    12,    13,    14,     0,    15,     0,    16,
       0,    17,     0,    18,     0,    19,     0,    20,     0,    21,
      22,     0,   134,   135,   147,   148,   136,   137,   138,     6,
       0,   275,     0,   263,     0,     0,   260,   261,    99,     0,
       0,   101,     0,     9,     0,     0,   131,   122,   121,   276,
       0,     0,     0,     0,     0,     0,    10,   151,   259,   149,
       0,   262,     0,     0,     0,     0,     0,   281,   280,   259,
     128,   120,     0,   119,   124,   160,   161,   234,   235,   162,
     250,   251,   118,   253,     0,     0,   266,   267,   259,   278,
     114,   132,   133,   259,   259,   259,   259,     0,   259,   279,
       0,   152,   153,   157,   158,   159,   248,   249,   252,     0,
     139,     0,   265,   274,     0,     0,   268,     0,   268,     0,
     201,     0,     0,     0,   168,   169,   170,   171,   172,   173,
     174,   175,     0,   271,   229,   143,   144,     0,   140,     0,
     113,   129,     0,     0,     0,    24,    35,     0,     0,     0,
       0,     0,     0,     0,   258,   264,     0,     0,   269,   270,
       0,     0,   192,   191,     0,     0,     0,     0,   205,   206,
     204,   208,   207,     0,   229,   226,   221,   222,     0,   214,
       0,   272,   273,   141,     0,   142,     0,   259,   254,     0,
     126,     0,     0,     0,   259,   259,   259,   259,     0,     0,
     150,     0,   246,     0,   247,   177,   178,   179,   180,   181,
     176,     0,   198,   193,     0,     0,   203,   200,   199,     0,
     223,     0,   220,     0,   216,   217,   218,   213,   215,     0,
       0,   231,     0,   146,     0,   123,     0,     0,   112,   127,
      50,    53,     0,    89,     0,   109,     0,   259,   241,   245,
       0,   268,   202,     0,   233,     0,   228,     0,   232,     0,
     219,   230,   145,   259,   255,   100,   102,   259,     0,   117,
     130,   116,     0,   103,     0,     0,     0,     0,   155,   163,
     166,   164,   236,   237,   165,   186,   183,   184,   185,     0,
     189,   187,   182,     0,   225,   227,   224,   209,     0,    79,
     259,     0,   111,   104,   105,   106,   107,   108,    92,     0,
       0,   167,   211,   259,   154,   190,   188,   195,   196,   197,
     194,   259,   256,     0,   110,     0,     0,     0,   210,   156,
       0,     0,     0,   239,     0,   243,     0,   257,   259,   238,
       0,   242,     0,     0,     0,   240,   244,     0,     0,     0,
     259,   212,     0,   115
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,
    -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,
    -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,
    -384,  -168,   -18,    74,  -384,  -383,  -163,  -384,  -384,  -384,
    -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,   103,  -384,
    -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,  -384,
    -178,  -384,  -146,  -384,  -384,  -384,  -384,  -384,  -384,  -384,
    -384,  -384,   -29,  -384,  -384,  -384,  -384,  -384,  -384,  -384,
    -384,  -384,  -384,  -384,  -139,  -384,  -384,  -356,  -384,  -384,
    -384,   -25,  -384,  -384,  -384,   124,  -384,  -384,  -384,  -384,
    -384,  -384,  -384,  -377,  -371,   126,  -384,  -384,  -384,  -145,
    -148,  -147,  -384,  -384,  -384,   128,  -186,  -384,  -384,     6,
    -112,    -6,  -156,  -132,    88
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     2,     3,     4,     7,     8,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   336,   398,   363,
     391,   236,   128,   135,   333,   358,   160,   136,   161,   162,
     279,   328,   230,   359,   180,   181,   111,   112,   163,   228,
     322,   113,   114,   115,   190,   149,   290,   367,   192,   164,
     368,   369,   165,   214,   300,   215,   382,   406,   216,   253,
     217,   410,   301,   218,   308,   257,   305,   219,   260,   220,
     262,   221,   401,   418,   222,   317,   318,   349,   269,   312,
     345,   275,   320,   347,   343,   166,   371,   372,   422,   167,
     373,   424,   168,   291,   293,   374,   169,   196,   170,   171,
     198,   129,   116,   151,   117,   137,   250,   273,   118,   120,
     138,   139,   182,   361,   173
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      10,   199,   193,   197,   231,   121,   121,   121,   121,   121,
     130,   229,   199,   131,   132,   191,   238,   172,   122,   123,
     124,   125,   254,   154,   241,   155,   134,   365,   263,   366,
     421,   154,   264,   155,   156,   176,   237,   237,   423,   206,
       1,   203,   258,   437,   277,   425,   147,   207,   148,   278,
       5,   438,   208,   435,   209,   210,   211,   387,   212,   443,
     213,   436,   189,   177,     9,   265,   266,   267,   268,   259,
     433,   353,     6,     9,   283,   172,   354,   157,   158,     9,
       9,   439,   126,   127,   159,   189,   126,   127,   159,   375,
     126,   127,   159,   119,   376,   377,   378,   314,   315,   316,
     280,   133,   379,   223,   380,   381,   224,   225,   226,   227,
     271,   272,   252,   146,   292,   294,   330,   248,   249,   302,
     150,   403,   152,   302,   306,   172,   404,   329,   411,   324,
     199,   157,   158,   412,   407,   408,   409,   237,   204,   205,
     334,   153,   321,   174,   323,   248,   249,   399,   400,   326,
     327,   175,   178,   179,   134,   383,   183,   184,   185,   186,
     235,   295,   296,   297,   298,   299,   187,   239,   240,   188,
     242,   156,   140,   201,   141,   232,   142,   344,   143,   346,
     144,   348,   145,   233,  -125,   234,   243,   350,   246,   247,
     199,   370,   197,   251,   255,   121,   393,   394,   395,   396,
     397,   256,   261,   270,   284,   388,   199,   245,   274,   289,
     276,   303,   281,   282,   307,   285,   335,   286,   287,   288,
     405,   309,   311,   313,   319,   419,   304,   402,   325,   357,
     392,   337,   338,   339,   340,   341,   342,   430,   351,   310,
     352,   364,   355,   413,   356,   362,   417,   384,   385,   386,
     387,   390,   414,   200,   415,   416,   199,   370,   197,   426,
     427,   428,   429,   420,   199,   431,   432,   331,   332,   441,
     440,     0,   194,     0,   195,     0,     0,     0,     0,     0,
     202,   434,     0,   292,   294,     0,     0,   244,     0,     0,
       0,     0,     0,   442,   350,     0,     0,     0,   292,     0,
     294,     0,     0,     0,     0,   350,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   360,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   389,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   360,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   360,     0,
       0,     0,     0,     0,     0,     0,   360,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      89
};

static const yytype_int16 yycheck[] =
{
       6,   148,   148,   148,   160,    11,    12,    13,    14,    15,
      28,   159,   159,    31,    32,   147,   184,   129,    12,    13,
      14,    15,   208,    83,   187,    85,    84,    83,    83,    85,
     413,    83,    87,    85,    86,    89,   183,   184,   415,    98,
       3,   153,    89,   128,   140,   416,   141,   106,   143,   145,
       0,   434,   111,   430,   113,   114,   115,   142,   117,   442,
     119,   432,   129,   117,   131,   120,   121,   122,   123,   116,
     426,   140,     4,   131,   237,   187,   145,   129,   130,   131,
     131,   437,   146,   147,   144,   129,   146,   147,   144,    94,
     146,   147,   144,   139,    99,   100,   101,   124,   125,   126,
     232,   139,   107,    89,   109,   110,    92,    93,    94,    95,
      90,    91,    99,   139,   246,   247,   284,   104,   105,   251,
     143,   140,   143,   255,   256,   237,   145,   283,   140,   277,
     277,   129,   130,   145,    99,   100,   101,   284,    96,    97,
     287,   143,   274,   140,   276,   104,   105,    96,    97,   281,
     282,   140,   140,   132,    84,   341,   140,   140,   140,   140,
     178,    99,   100,   101,   102,   103,   140,   185,   186,   140,
     188,    86,    98,   140,   100,   141,   102,   309,   104,   311,
     106,   313,   108,    88,   141,    88,   142,   319,   141,   141,
     337,   337,   337,   141,   141,   201,   133,   134,   135,   136,
     137,   141,   118,   127,   140,   353,   353,   201,   141,   143,
     141,   112,   141,   141,    89,   140,    87,   140,   140,   140,
     108,   141,   141,   141,   141,   403,   255,   366,   142,   140,
     362,   144,   142,   142,   142,   142,   142,   128,   142,   264,
     142,   140,   142,   390,   142,   141,   127,   142,   142,   142,
     142,   140,   142,   150,   141,   141,   403,   403,   403,   141,
     145,   140,   142,   411,   411,   142,   128,   285,   286,   142,
     140,    -1,   148,    -1,   148,    -1,    -1,    -1,    -1,    -1,
     152,   428,    -1,   415,   416,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,   440,   426,    -1,    -1,    -1,   430,    -1,
     432,    -1,    -1,    -1,    -1,   437,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   334,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   434,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   442,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     138
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,     3,   149,   150,   151,     0,     4,   152,   153,   131,
     269,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,   138,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   194,   195,   199,   200,   201,   260,   262,   266,   139,
     267,   269,   267,   267,   267,   267,   146,   147,   180,   259,
     180,   180,   180,   139,    84,   181,   185,   263,   268,   269,
     181,   181,   181,   181,   181,   181,   139,   141,   143,   203,
     143,   261,   143,   143,    83,    85,    86,   129,   130,   144,
     184,   186,   187,   196,   207,   210,   243,   247,   250,   254,
     256,   257,   268,   272,   140,   140,    89,   117,   140,   132,
     192,   193,   270,   140,   140,   140,   140,   140,   140,   129,
     202,   271,   206,   210,   243,   253,   255,   257,   258,   259,
     196,   140,   263,   268,    96,    97,    98,   106,   111,   113,
     114,   115,   117,   119,   211,   213,   216,   218,   221,   225,
     227,   229,   232,    89,    92,    93,    94,    95,   197,   258,
     190,   270,   141,    88,    88,   180,   179,   259,   179,   180,
     180,   184,   180,   142,   272,   267,   141,   141,   104,   105,
     264,   141,    99,   217,   264,   141,   141,   223,    89,   116,
     226,   118,   228,    83,    87,   120,   121,   122,   123,   236,
     127,    90,    91,   265,   141,   239,   141,   140,   145,   188,
     271,   141,   141,   184,   140,   140,   140,   140,   140,   143,
     204,   251,   271,   252,   271,    99,   100,   101,   102,   103,
     212,   220,   271,   112,   220,   224,   271,    89,   222,   141,
     239,   141,   237,   141,   124,   125,   126,   233,   234,   141,
     240,   271,   198,   271,   258,   142,   271,   271,   189,   270,
     179,   180,   180,   182,   259,    87,   175,   144,   142,   142,
     142,   142,   142,   242,   271,   238,   271,   241,   271,   235,
     271,   142,   142,   140,   145,   142,   142,   140,   183,   191,
     269,   271,   141,   177,   140,    83,    85,   205,   208,   209,
     210,   244,   245,   248,   253,    94,    99,   100,   101,   107,
     109,   110,   214,   264,   142,   142,   142,   142,   258,   180,
     140,   178,   271,   133,   134,   135,   136,   137,   176,    96,
      97,   230,   232,   140,   145,   108,   215,    99,   100,   101,
     219,   140,   145,   259,   142,   141,   141,   127,   231,   208,
     258,   183,   246,   251,   249,   252,   141,   145,   140,   142,
     128,   142,   128,   235,   259,   251,   252,   128,   183,   235,
     140,   142,   259,   183
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_int16 yyr1[] =
{
       0,   148,   149,   150,   151,   151,   152,   153,   153,   154,
     154,   155,   155,   155,   156,   156,   156,   156,   156,   156,
     157,   157,   157,   158,   159,   160,   160,   160,   160,   160,
     160,   160,   160,   160,   160,   161,   162,   162,   162,   162,
     162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
     163,   164,   164,   165,   166,   166,   166,   166,   166,   166,
     166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
     166,   166,   166,   166,   166,   166,   166,   166,   166,   167,
     168,   168,   168,   168,   168,   168,   168,   168,   168,   169,
     170,   170,   171,   172,   172,   172,   172,   172,   172,   173,
     173,   174,   174,   175,   176,   176,   176,   176,   176,   177,
     177,   178,   179,   180,   181,   182,   183,   183,   184,   184,
     184,   185,   185,   186,   186,   187,   188,   189,   190,   190,
     191,   192,   192,   193,   194,   194,   194,   194,   194,   195,
     196,   197,   197,   197,   197,   197,   198,   199,   199,   200,
     201,   202,   202,   203,   204,   205,   205,   206,   206,   206,
     207,   207,   207,   208,   208,   208,   209,   209,   210,   210,
     210,   210,   210,   210,   210,   210,   211,   212,   212,   212,
     212,   212,   213,   214,   214,   214,   214,   214,   214,   214,
     215,   216,   217,   217,   218,   219,   219,   219,   220,   221,
     222,   223,   223,   224,   225,   226,   226,   227,   228,   229,
     230,   231,   231,   232,   233,   233,   234,   234,   234,   235,
     236,   236,   236,   236,   236,   236,   237,   237,   238,   239,
     239,   240,   241,   242,   243,   243,   244,   244,   245,   246,
     246,   247,   248,   249,   249,   250,   251,   252,   253,   253,
     254,   254,   255,   256,   257,   257,   257,   257,   258,   259,
     259,   259,   260,   261,   261,   262,   263,   263,   264,   264,
     264,   265,   265,   265,   266,   267,   268,   269,   270,   271,
     272,   272
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     2,     3,     2,     0,     3,     2,     0,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       6,     1,     1,     6,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     8,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     6,
       1,     1,     8,     1,     1,     1,     1,     1,     1,     2,
       7,     2,     7,     2,     1,     1,     1,     1,     1,     0,
       3,     1,     3,     3,     2,    11,     1,     1,     1,     1,
       1,     1,     1,     4,     1,     1,     1,     1,     0,     1,
       1,     0,     1,     1,     1,     1,     1,     1,     1,     4,
       2,     2,     2,     1,     1,     4,     1,     1,     1,     3,
       6,     0,     1,     2,     4,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     3,     1,     1,     1,
       1,     1,     5,     1,     1,     1,     1,     1,     2,     1,
       1,     2,     1,     2,     6,     1,     1,     1,     1,     3,
       1,     0,     3,     1,     2,     1,     1,     2,     1,     5,
       2,     0,     6,     3,     0,     1,     1,     1,     1,     1,
       2,     1,     1,     2,     4,     4,     0,     3,     1,     0,
       3,     1,     1,     1,     1,     1,     1,     1,     5,     1,
       3,     5,     5,     1,     3,     5,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     5,     7,     9,     2,     0,
       1,     1,     3,     0,     3,     4,     2,     2,     0,     1,
       1,     0,     1,     1,     4,     1,     1,     1,     1,     1,
       1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (irtree, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, irtree); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, void* irtree)
{
  FILE *yyoutput = yyo;
  YYUSE (yyoutput);
  YYUSE (irtree);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
# endif
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, void* irtree)
{
  YYFPRINTF (yyo, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyo, yytype, yyvaluep, irtree);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, int yyrule, void* irtree)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[+yyssp[yyi + 1 - yynrhs]],
                       &yyvsp[(yyi + 1) - (yynrhs)]
                                              , irtree);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule, irtree); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
#  else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                yy_state_t *yyssp, int yytoken)
{
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Actual size of YYARG. */
  int yycount = 0;
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[+*yyssp];
      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
      yysize = yysize0;
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYPTRDIFF_T yysize1
                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
                    yysize = yysize1;
                  else
                    return 2;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    /* Don't count the "%s"s in the final size, but reserve room for
       the terminator.  */
    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
      yysize = yysize1;
    else
      return 2;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void* irtree)
{
  YYUSE (yyvaluep);
  YYUSE (irtree);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;
/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void* irtree)
{
    yy_state_fast_t yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss;
    yy_state_t *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYPTRDIFF_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
# undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex ();
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2:
#line 163 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        { 
            ((IRProgram *)irtree)->setHeaderString(string((yyvsp[-1].token_atrib).texto->c_str()));
        }
#line 1952 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 3:
#line 168 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            ((IRProgram *)irtree)->addOptionList((yyvsp[-2].optlist));
            ((IRProgram *)irtree)->addStatementList((yyvsp[-1].stmntlist));
        }
#line 1961 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 4:
#line 174 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyvsp[-1].optlist)->push_back((yyvsp[0].iroption));
            (yyval.optlist) = (yyvsp[-1].optlist);
        }
#line 1970 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 5:
#line 179 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.optlist) = new list<IROption *>;
        }
#line 1978 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 6:
#line 184 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.iroption) = new FP1IROption((yyvsp[-2].token_atrib).linea,*(yyvsp[-1].str));
        }
#line 1986 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 7:
#line 189 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyvsp[-1].stmntlist)->push_back((yyvsp[0].irstatement));
            (yyval.stmntlist) = (yyvsp[-1].stmntlist);
        }
#line 1995 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 8:
#line 194 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.stmntlist) = new list<IRStatement *>;
        }
#line 2003 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 9:
#line 199 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irstatement) = (yyvsp[-1].irinstruction);
        }
#line 2011 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 10:
#line 203 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irstatement) = (yyvsp[-1].irstatement);
        }
#line 2019 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 11:
#line 213 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 2027 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 12:
#line 217 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 2035 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 13:
#line 221 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 2043 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 14:
#line 226 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 2051 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 15:
#line 230 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 2059 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 16:
#line 234 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 2067 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 17:
#line 238 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 2075 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 18:
#line 242 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 2083 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 19:
#line 246 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = (yyvsp[0].irswzinstr);
        }
#line 2091 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 20:
#line 251 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.irinstruction) = (yyvsp[0].irsamplinstr);
        }
#line 2099 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 21:
#line 255 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = (yyvsp[0].irkillinstr);
        }
#line 2107 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 22:
#line 259 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = (yyvsp[0].irzxpinstr);
        }
#line 2115 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 23:
#line 264 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRCHSInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2123 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 24:
#line 270 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyvsp[-2].irdstoperand)->setLine((yyvsp[-3].irinstruction)->getLine());
            (yyvsp[0].irsrcoperand)->setLine((yyvsp[-3].irinstruction)->getLine());
            (yyvsp[-3].irinstruction)->setDest((yyvsp[-2].irdstoperand));
            (yyvsp[-3].irinstruction)->setSource0((yyvsp[0].irsrcoperand));
            (yyval.irinstruction)=(yyvsp[-3].irinstruction);
        }
#line 2135 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 25:
#line 279 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2143 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 26:
#line 283 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2151 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 27:
#line 287 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2159 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 28:
#line 291 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2167 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 29:
#line 295 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2175 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 30:
#line 299 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2183 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 31:
#line 303 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2191 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 32:
#line 307 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2199 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 33:
#line 311 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2207 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 34:
#line 315 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2215 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 35:
#line 321 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyvsp[-2].irdstoperand)->setLine((yyvsp[-3].irinstruction)->getLine());
            (yyvsp[0].irsrcoperand)->setLine((yyvsp[-3].irinstruction)->getLine());
            (yyvsp[-3].irinstruction)->setDest((yyvsp[-2].irdstoperand));
            (yyvsp[-3].irinstruction)->setSource0((yyvsp[0].irsrcoperand));
            (yyval.irinstruction)=(yyvsp[-3].irinstruction);
        }
#line 2227 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 36:
#line 330 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2235 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 37:
#line 334 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2243 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 38:
#line 338 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2251 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 39:
#line 342 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2259 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 40:
#line 346 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2267 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 41:
#line 350 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2275 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 42:
#line 354 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2283 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 43:
#line 358 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2291 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 44:
#line 362 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2299 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 45:
#line 366 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2307 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 46:
#line 370 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2315 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 47:
#line 374 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2323 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 48:
#line 378 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2331 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 49:
#line 382 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2339 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 50:
#line 388 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyvsp[-4].irdstoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[-2].irsrcoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[0].irsrcoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[-5].irinstruction)->setDest((yyvsp[-4].irdstoperand));
            (yyvsp[-5].irinstruction)->setSource0((yyvsp[-2].irsrcoperand));
            (yyvsp[-5].irinstruction)->setSource1((yyvsp[0].irsrcoperand));
            (yyval.irinstruction)=(yyvsp[-5].irinstruction);
        }
#line 2353 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 51:
#line 399 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2361 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 52:
#line 403 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2369 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 53:
#line 409 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyvsp[-4].irdstoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[-2].irsrcoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[0].irsrcoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[-5].irinstruction)->setDest((yyvsp[-4].irdstoperand));
            (yyvsp[-5].irinstruction)->setSource0((yyvsp[-2].irsrcoperand));
            (yyvsp[-5].irinstruction)->setSource1((yyvsp[0].irsrcoperand));
            (yyval.irinstruction)=(yyvsp[-5].irinstruction);
        }
#line 2383 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 54:
#line 420 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2391 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 55:
#line 424 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2399 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 56:
#line 428 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2407 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 57:
#line 432 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2415 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 58:
#line 436 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2423 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 59:
#line 440 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2431 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 60:
#line 444 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2439 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 61:
#line 448 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2447 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 62:
#line 452 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2455 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 63:
#line 456 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2463 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 64:
#line 460 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2471 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 65:
#line 464 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2479 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 66:
#line 468 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2487 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 67:
#line 472 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2495 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 68:
#line 476 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2503 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 69:
#line 480 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
            (yyval.irinstruction)->setIsFixedPoint();
        }
#line 2512 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 70:
#line 485 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2520 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 71:
#line 489 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2528 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 72:
#line 493 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2536 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 73:
#line 497 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2544 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 74:
#line 501 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2552 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 75:
#line 505 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2560 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 76:
#line 509 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2568 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 77:
#line 513 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2576 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 78:
#line 517 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2584 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 79:
#line 524 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyvsp[-6].irdstoperand)->setLine((yyvsp[-7].irinstruction)->getLine());
            (yyvsp[-4].irsrcoperand)->setLine((yyvsp[-7].irinstruction)->getLine());
            (yyvsp[-2].irsrcoperand)->setLine((yyvsp[-7].irinstruction)->getLine());
            (yyvsp[0].irsrcoperand)->setLine((yyvsp[-7].irinstruction)->getLine());
            (yyvsp[-7].irinstruction)->setDest((yyvsp[-6].irdstoperand));
            (yyvsp[-7].irinstruction)->setSource0((yyvsp[-4].irsrcoperand));
            (yyvsp[-7].irinstruction)->setSource1((yyvsp[-2].irsrcoperand));
            (yyvsp[-7].irinstruction)->setSource2((yyvsp[0].irsrcoperand));
            (yyval.irinstruction)=(yyvsp[-7].irinstruction);
        }
#line 2600 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 80:
#line 537 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2608 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 81:
#line 541 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2616 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 82:
#line 545 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2624 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 83:
#line 549 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2632 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 84:
#line 553 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2640 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 85:
#line 557 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2648 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 86:
#line 561 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
            (yyval.irinstruction)->setIsFixedPoint();
        }
#line 2657 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 87:
#line 566 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
            (yyval.irinstruction)->setIsFixedPoint();
        }
#line 2666 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 88:
#line 571 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2674 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 89:
#line 577 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyvsp[-4].irdstoperand)->setLine((yyvsp[-5].irswzinstr)->getLine());
            (yyvsp[-2].irsrcoperand)->setLine((yyvsp[-5].irswzinstr)->getLine());
            (yyvsp[0].irswzcomps)->setLine((yyvsp[-5].irswzinstr)->getLine());
            (yyvsp[-5].irswzinstr)->setDest((yyvsp[-4].irdstoperand));
            (yyvsp[-5].irswzinstr)->setSource0((yyvsp[-2].irsrcoperand));
            (yyvsp[-5].irswzinstr)->setSwizzleComponents((yyvsp[0].irswzcomps));
            (yyval.irswzinstr) = (yyvsp[-5].irswzinstr);
        }
#line 2688 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 90:
#line 588 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.irswzinstr) = new IRSwizzleInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2696 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 91:
#line 592 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irswzinstr) = new IRSwizzleInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2704 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 92:
#line 599 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyvsp[-6].irdstoperand)->setLine((yyvsp[-7].irsamplinstr)->getLine());
            (yyvsp[-4].irsrcoperand)->setLine((yyvsp[-7].irsamplinstr)->getLine());
            (yyvsp[-7].irsamplinstr)->setDest((yyvsp[-6].irdstoperand));
            (yyvsp[-7].irsamplinstr)->setSource0((yyvsp[-4].irsrcoperand));
            (yyvsp[-7].irsamplinstr)->setTextureImageUnit((yyvsp[-2].intconst));
            (yyvsp[-7].irsamplinstr)->setTextureTarget(*(yyvsp[0].str));
            (yyval.irsamplinstr) = (yyvsp[-7].irsamplinstr);
        }
#line 2718 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 93:
#line 610 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irsamplinstr) = new IRSampleInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2726 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 94:
#line 614 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irsamplinstr) = new IRSampleInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2734 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 95:
#line 618 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irsamplinstr) = new IRSampleInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2742 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 96:
#line 622 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irsamplinstr) = new IRSampleInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2750 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 97:
#line 626 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irsamplinstr) = new IRSampleInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2758 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 98:
#line 630 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irsamplinstr) = new IRSampleInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2766 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 99:
#line 635 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irkillinstr) = new IRKillInstruction((yyvsp[-1].token_atrib).linea,string((yyvsp[-1].token_atrib).texto->c_str()));
            (yyvsp[0].irsrcoperand)->setLine((yyval.irkillinstr)->getLine());
            (yyval.irkillinstr)->setSource0((yyvsp[0].irsrcoperand));
        }
#line 2776 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 100:
#line 641 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
			(yyval.irkillinstr) = new IRKillInstruction((yyvsp[-6].token_atrib).linea,string((yyvsp[-6].token_atrib).texto->c_str()));
            (yyvsp[-5].irsrcoperand)->setLine((yyval.irkillinstr)->getLine());
            (yyval.irkillinstr)->setSource0((yyvsp[-5].irsrcoperand));
            (yyval.irkillinstr)->setIsKillSampleInstr();
            (yyval.irkillinstr)->setKillSample((yyvsp[-1].intconst));
        }
#line 2788 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 101:
#line 650 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irzxpinstr) = new IRZExportInstruction((yyvsp[-1].token_atrib).linea,string((yyvsp[-1].token_atrib).texto->c_str()));
            (yyvsp[0].irsrcoperand)->setLine((yyval.irzxpinstr)->getLine());
            (yyval.irzxpinstr)->setSource0((yyvsp[0].irsrcoperand));
        }
#line 2798 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 102:
#line 656 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
			(yyval.irzxpinstr) = new IRZExportInstruction((yyvsp[-6].token_atrib).linea,string((yyvsp[-6].token_atrib).texto->c_str()));
            (yyvsp[-5].irsrcoperand)->setLine((yyval.irzxpinstr)->getLine());
            (yyval.irzxpinstr)->setSource0((yyvsp[-5].irsrcoperand));
            (yyval.irzxpinstr)->setIsExpSampleInstr();
            (yyval.irzxpinstr)->setExportSample((yyvsp[-1].intconst));
        }
#line 2810 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 103:
#line 665 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 2818 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 104:
#line 670 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2827 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 105:
#line 675 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2836 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 106:
#line 680 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2845 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 107:
#line 685 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2854 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 108:
#line 690 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2863 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 109:
#line 696 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.intconst) = 0; // Default value of texture when no specified unit number
        }
#line 2871 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 110:
#line 700 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.intconst) = (yyvsp[-1].intconst);
        }
#line 2879 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 111:
#line 705 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 2887 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 112:
#line 714 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            if ((yyvsp[-2].boolean)) (yyvsp[-1].irsrcoperand)->setNegateFlag();
            (yyvsp[-1].irsrcoperand)->setSwizzleMask(*(yyvsp[0].str));
            (yyval.irsrcoperand) = (yyvsp[-1].irsrcoperand);
        }
#line 2897 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 113:
#line 721 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            if ((yyvsp[-2].boolean)) (yyvsp[-1].irsrcoperand)->setNegateFlag();
            (yyvsp[-1].irsrcoperand)->setSwizzleMask(*(yyvsp[0].str));
            (yyval.irsrcoperand) = (yyvsp[-1].irsrcoperand);
        }
#line 2907 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 114:
#line 728 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyvsp[-1].irdstoperand)->setWriteMask(*(yyvsp[0].str));
            (yyval.irdstoperand) = (yyvsp[-1].irdstoperand);
        }
#line 2916 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 115:
#line 737 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irswzcomps) = new IRSwizzleComponents();
            (yyval.irswzcomps)->setComponent(0,(yyvsp[-9].irswzcomp),(yyvsp[-10].boolean));
            (yyval.irswzcomps)->setComponent(1,(yyvsp[-6].irswzcomp),(yyvsp[-7].boolean));
            (yyval.irswzcomps)->setComponent(2,(yyvsp[-3].irswzcomp),(yyvsp[-4].boolean));
            (yyval.irswzcomps)->setComponent(3,(yyvsp[0].irswzcomp),(yyvsp[-1].boolean));
        }
#line 2928 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 116:
#line 746 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            if ((yyvsp[0].intconst)==0) (yyval.irswzcomp) = IRSwizzleComponents::ZERO;
            else (yyval.irswzcomp) = IRSwizzleComponents::ONE;
        }
#line 2937 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 117:
#line 751 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irswzcomp) = (yyvsp[0].irswzcomp);
        }
#line 2945 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 118:
#line 759 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irsrcoperand) = new IRSrcOperand(*(yyvsp[0].str));
        }
#line 2953 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 119:
#line 763 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irsrcoperand) = new IRSrcOperand(*(yyvsp[0].str));
            (yyval.irsrcoperand)->setIsFragmentRegister(true);
        }
#line 2962 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 120:
#line 768 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.irsrcoperand) = (yyvsp[0].irsrcoperand);
        }
#line 2970 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 121:
#line 775 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irdstoperand) = new IRDstOperand(*(yyvsp[0].str));
        }
#line 2978 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 122:
#line 779 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.irdstoperand) = new IRDstOperand(*(yyvsp[0].str));
            (yyval.irdstoperand)->setIsFragmentResultRegister(true);
        }
#line 2987 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 123:
#line 785 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irsrcoperand) = new IRSrcOperand(*(yyvsp[-3].str));
            (yyval.irsrcoperand)->setArrayAddressing(new IRArrayAddressing((yyvsp[-1].intconst)));
        }
#line 2996 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 124:
#line 790 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irsrcoperand) = new IRSrcOperand(string(""));
            (yyval.irsrcoperand)->setParamBinding((yyvsp[0].irparambind));
        }
#line 3005 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 125:
#line 796 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 3013 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 126:
#line 801 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3021 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 127:
#line 806 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.str)= (yyvsp[0].str);
        }
#line 3029 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 128:
#line 811 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),"xyzw"); 
            //$$ = new string("xyzw");
        }
#line 3038 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 129:
#line 816 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 3046 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 130:
#line 823 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            if (!(yyvsp[0].str)->compare("x")) (yyval.irswzcomp) = IRSwizzleComponents::X;
            else if (!(yyvsp[0].str)->compare("y")) (yyval.irswzcomp) = IRSwizzleComponents::Y;
            else if (!(yyvsp[0].str)->compare("z")) (yyval.irswzcomp) = IRSwizzleComponents::Z;
            else if (!(yyvsp[0].str)->compare("w")) (yyval.irswzcomp) = IRSwizzleComponents::W;
            else if (!(yyvsp[0].str)->compare("r")) (yyval.irswzcomp) = IRSwizzleComponents::X;
            else if (!(yyvsp[0].str)->compare("g")) (yyval.irswzcomp) = IRSwizzleComponents::Y;
            else if (!(yyvsp[0].str)->compare("b")) (yyval.irswzcomp) = IRSwizzleComponents::Z;
            else if (!(yyvsp[0].str)->compare("a")) (yyval.irswzcomp) = IRSwizzleComponents::W;
        }
#line 3061 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 131:
#line 835 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),"xyzw"); //$$ = new string("xyzw");
        }
#line 3069 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 132:
#line 839 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 3077 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 133:
#line 865 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 3085 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 134:
#line 875 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irstatement) = (yyvsp[0].irattrstmnt);
        }
#line 3093 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 135:
#line 879 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irstatement) = (yyvsp[0].irparamstmnt);
        }
#line 3101 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 136:
#line 883 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irstatement) = (yyvsp[0].irtempstmnt);
        }
#line 3109 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 137:
#line 887 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irstatement) = (yyvsp[0].iroutputstmnt);
        }
#line 3117 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 138:
#line 891 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irstatement) = (yyvsp[0].iraliasstmnt);
        }
#line 3125 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 139:
#line 897 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irattrstmnt) = new FP1IRATTRIBStatement((yyvsp[-3].token_atrib).linea,*(yyvsp[-2].str));
            (yyval.irattrstmnt)->setInputAttribute(*(yyvsp[0].str));
        }
#line 3134 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 140:
#line 903 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 3142 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 141:
#line 908 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3153 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 142:
#line 915 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[0].intconst))
        }
#line 3164 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 143:
#line 922 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3173 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 144:
#line 927 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3182 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 145:
#line 932 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-3].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-1].intconst))
        }
#line 3193 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 146:
#line 940 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3201 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 147:
#line 947 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparamstmnt) = (yyvsp[0].irparamstmnt);
        }
#line 3209 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 148:
#line 951 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.irparamstmnt) = (yyvsp[0].irparamstmnt);
        }
#line 3217 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 149:
#line 956 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparamstmnt) = new IRPARAMStatement((yyvsp[-2].token_atrib).linea,*(yyvsp[-1].str),false);
            (yyval.irparamstmnt)->setSize(-1);
            (yyval.irparamstmnt)->setParamBindings((yyvsp[0].pbindlist));
        }
#line 3227 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 150:
#line 964 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparamstmnt) = new IRPARAMStatement((yyvsp[-5].token_atrib).linea,*(yyvsp[-4].str),true);
            (yyval.irparamstmnt)->setSize((yyvsp[-2].intconst));
            (yyval.irparamstmnt)->setParamBindings((yyvsp[0].pbindlist));
        }
#line 3237 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 151:
#line 971 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = -1; // It means that no optional size is specified
        }
#line 3245 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 152:
#line 978 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3253 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 153:
#line 983 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.pbindlist) = new list<IRParamBinding *>;
            (yyval.pbindlist)->push_back((yyvsp[0].irparambind));
        }
#line 3262 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 154:
#line 989 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.pbindlist) = (yyvsp[-1].pbindlist);
        }
#line 3270 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 155:
#line 994 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.pbindlist) = new list<IRParamBinding *>;
            (yyval.pbindlist)->push_back((yyvsp[0].irparambind));
        }
#line 3279 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 156:
#line 999 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyvsp[-2].pbindlist)->push_back((yyvsp[0].irparambind));
            (yyval.pbindlist) = (yyvsp[-2].pbindlist);
        }
#line 3288 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 157:
#line 1005 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3296 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 158:
#line 1009 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3304 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 159:
#line 1013 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3312 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 160:
#line 1018 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyvsp[0].irparambind)->setIsImplicitBinding(true);
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3321 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 161:
#line 1023 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyvsp[0].irparambind)->setIsImplicitBinding(true);
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3330 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 162:
#line 1028 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyvsp[0].irparambind)->setIsImplicitBinding(true);
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3339 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 163:
#line 1034 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3347 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 164:
#line 1038 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3355 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 165:
#line 1042 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3363 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 166:
#line 1047 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3371 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 167:
#line 1051 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str),true);
        }
#line 3379 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 168:
#line 1056 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 3387 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 169:
#line 1060 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 3395 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 170:
#line 1064 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 3403 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 171:
#line 1068 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 3411 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 172:
#line 1072 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 3419 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 173:
#line 1076 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 3427 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 174:
#line 1080 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 3435 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 175:
#line 1084 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str),true);
        }
#line 3443 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 176:
#line 1089 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-2].token_atrib).texto))
            APPEND_STR(*(yyval.str),*(yyvsp[-1].str))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3455 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 177:
#line 1098 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3464 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 178:
#line 1103 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3473 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 179:
#line 1108 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3482 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 180:
#line 1113 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3491 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 181:
#line 1118 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3500 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 182:
#line 1124 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-4].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-2].intconst))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3512 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 183:
#line 1133 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3521 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 184:
#line 1138 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3530 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 185:
#line 1143 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3539 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 186:
#line 1148 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3548 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 187:
#line 1153 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3557 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 188:
#line 1158 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3568 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 189:
#line 1165 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3577 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 190:
#line 1171 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3586 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 191:
#line 1177 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3597 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 192:
#line 1185 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3606 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 193:
#line 1190 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*(yyvsp[-1].str))
            APPEND_STR(*(yyval.str),*((yyvsp[0].token_atrib).texto))
        }
#line 3617 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 194:
#line 1199 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-5].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-3].intconst))
            APPEND_STR(*(yyval.str),*(yyvsp[-1].str))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3630 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 195:
#line 1209 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3639 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 196:
#line 1214 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3648 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 197:
#line 1219 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3657 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 198:
#line 1225 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3665 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 199:
#line 1230 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-2].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-1].intconst))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3677 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 200:
#line 1239 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3686 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 201:
#line 1245 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = 0; // Default value
        }
#line 3694 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 202:
#line 1249 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.intconst) = (yyvsp[-1].intconst);
        }
#line 3702 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 203:
#line 1254 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3710 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 204:
#line 1259 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto));
            APPEND_STR(*(yyval.str),*(yyvsp[0].str));
        }
#line 3721 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 205:
#line 1267 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3730 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 206:
#line 1272 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3739 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 207:
#line 1278 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto));
            APPEND_STR(*(yyval.str),*(yyvsp[0].str));
        }
#line 3750 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 208:
#line 1286 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3759 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 209:
#line 1292 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str), *(yyvsp[-4].str))
            APPEND_STR(*(yyval.str),".row")
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-1].intconst))
        }
#line 3771 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 210:
#line 1301 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str), *(yyvsp[-1].str))
            APPEND_STR(*(yyval.str), *(yyvsp[0].str))
        }
#line 3782 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 211:
#line 1309 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),".row[0..3]"); 
            //$$ = new string(".row[0..3]");
        }
#line 3791 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 212:
#line 1314 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),".row[")
            APPEND_ROW_RANGE_SELECTION(*(yyval.str),(yyvsp[-3].intconst),(yyvsp[-1].intconst))
        }
#line 3802 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 213:
#line 1322 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str), *((yyvsp[-2].token_atrib).texto))
            APPEND_STR(*(yyval.str), *(yyvsp[-1].str))
            APPEND_STR(*(yyval.str), *(yyvsp[0].str))
        }
#line 3814 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 214:
#line 1331 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),".normal"); 
            //$$ = new string(".normal");
        }
#line 3823 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 215:
#line 1336 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 3831 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 216:
#line 1341 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3840 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 217:
#line 1346 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3849 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 218:
#line 1351 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3858 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 219:
#line 1357 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3866 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 220:
#line 1362 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str), *((yyvsp[-1].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[0].intconst))
        }
#line 3877 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 221:
#line 1369 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3886 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 222:
#line 1374 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3895 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 223:
#line 1379 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str), *((yyvsp[-1].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[0].intconst))
        }
#line 3906 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 224:
#line 1386 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str), *((yyvsp[-3].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-1].intconst))
        }
#line 3917 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 225:
#line 1393 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str), *((yyvsp[-3].token_atrib).texto));
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-1].intconst));
        }
#line 3928 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 226:
#line 1401 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = 0; // Default value
        }
#line 3936 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 227:
#line 1405 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = (yyvsp[-1].intconst);
        }
#line 3944 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 228:
#line 1410 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3952 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 229:
#line 1415 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = 0; // Default value
        }
#line 3960 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 230:
#line 1419 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.intconst) = (yyvsp[-1].intconst);
        }
#line 3968 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 231:
#line 1424 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3976 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 232:
#line 1429 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3984 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 233:
#line 1434 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3992 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 234:
#line 1439 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.irparambind) = (yyvsp[0].irlocalenvbind);
        }
#line 4000 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 235:
#line 1443 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.irparambind) = (yyvsp[0].irlocalenvbind);
        }
#line 4008 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 236:
#line 1448 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 4016 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 237:
#line 1452 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 4024 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 238:
#line 1457 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyvsp[-1].irlocalenvbind)->setLine((yyvsp[-4].token_atrib).linea);
            (yyval.irparambind) = (yyvsp[-1].irlocalenvbind);
        }
#line 4033 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 239:
#line 1463 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::ENVPARAM);
            (yyval.irlocalenvbind)->setIndices((yyvsp[0].intconst),(yyvsp[0].intconst));
        }
#line 4042 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 240:
#line 1468 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::ENVPARAM);
            (yyval.irlocalenvbind)->setIndices((yyvsp[-2].intconst),(yyvsp[0].intconst));
        }
#line 4051 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 241:
#line 1474 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::ENVPARAM);
            (yyval.irlocalenvbind)->setLine((yyvsp[-4].token_atrib).linea);
            (yyval.irlocalenvbind)->setIndices((yyvsp[-1].intconst),(yyvsp[-1].intconst));
        }
#line 4061 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 242:
#line 1481 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyvsp[-1].irlocalenvbind)->setLine((yyvsp[-4].token_atrib).linea);
            (yyval.irparambind) = (yyvsp[-1].irlocalenvbind);
        }
#line 4070 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 243:
#line 1487 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::LOCALPARAM);
            (yyval.irlocalenvbind)->setIndices((yyvsp[0].intconst),(yyvsp[0].intconst));
        }
#line 4079 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 244:
#line 1492 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::LOCALPARAM);
            (yyval.irlocalenvbind)->setIndices((yyvsp[-2].intconst),(yyvsp[0].intconst));
        }
#line 4088 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 245:
#line 1498 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::LOCALPARAM);
            (yyval.irlocalenvbind)->setLine((yyvsp[-4].token_atrib).linea);
            (yyval.irlocalenvbind)->setIndices((yyvsp[-1].intconst),(yyvsp[-1].intconst));
        }
#line 4098 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 246:
#line 1505 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 4106 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 247:
#line 1510 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 4114 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 248:
#line 1515 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 4122 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 249:
#line 1519 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 4130 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 250:
#line 1524 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 4138 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 251:
#line 1528 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 4146 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 252:
#line 1533 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[0].floatconst),0.0f,0.0f,0.0f,true);
        }
#line 4154 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 253:
#line 1538 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[0].floatconst),(yyvsp[0].floatconst),(yyvsp[0].floatconst),(yyvsp[0].floatconst),true);
        }
#line 4162 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 254:
#line 1543 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[-1].floatconst),0.0f,0.0f,1.0f);
        }
#line 4170 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 255:
#line 1548 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[-3].floatconst),(yyvsp[-1].floatconst),0.0f,1.0f);
        }
#line 4178 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 256:
#line 1554 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[-5].floatconst),(yyvsp[-3].floatconst),(yyvsp[-1].floatconst),1.0f);
        }
#line 4186 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 257:
#line 1561 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[-7].floatconst),(yyvsp[-5].floatconst),(yyvsp[-3].floatconst),(yyvsp[-1].floatconst));
        }
#line 4194 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 258:
#line 1566 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            if ((yyvsp[-1].boolean)) (yyval.floatconst) = (-1)*(yyvsp[0].floatconst);
            else (yyval.floatconst) = (yyvsp[0].floatconst);
        }
#line 4203 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 259:
#line 1572 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.boolean) = false;
        }
#line 4211 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 260:
#line 1576 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.boolean) = true;
        }
#line 4219 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 261:
#line 1580 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.boolean) = false;
        }
#line 4227 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 262:
#line 1585 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.irtempstmnt) = new IRTEMPStatement((yyvsp[-2].token_atrib).linea,*(yyvsp[-1].str));
            (yyval.irtempstmnt)->setOtherTemporaries((yyvsp[0].strlist));
        }
#line 4236 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 263:
#line 1591 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.strlist) = new list<string>();
        }
#line 4244 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 264:
#line 1595 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyvsp[-2].strlist)->push_back(*(yyvsp[0].str));
            (yyval.strlist) = (yyvsp[-2].strlist);
        }
#line 4253 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 265:
#line 1602 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.iroutputstmnt) = new FP1IROUTPUTStatement((yyvsp[-3].token_atrib).linea,*(yyvsp[-2].str));
            (yyval.iroutputstmnt)->setOutputAttribute(*(yyvsp[0].str));
        }
#line 4262 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 266:
#line 1608 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($2.texto));
        }
#line 4271 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 267:
#line 1613 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($2.texto));
        }
#line 4280 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 268:
#line 1619 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),".front"); 
            //$$ = new string(".front"); // Default
        }
#line 4289 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 269:
#line 1624 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 4298 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 270:
#line 1629 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 4307 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 271:
#line 1635 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),".primary"); 
            //$$ = new string(".primary"); // Default
        }
#line 4316 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 272:
#line 1640 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 4325 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 273:
#line 1645 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 4334 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 274:
#line 1652 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.iraliasstmnt) = new IRALIASStatement((yyvsp[-3].token_atrib).linea,*(yyvsp[-2].str));
            (yyval.iraliasstmnt)->setAlias(*(yyvsp[0].str));
        }
#line 4343 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 275:
#line 1658 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {   
            (yyval.str) = (yyvsp[0].str);
        }
#line 4351 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 276:
#line 1663 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            (yyval.str) = (yyvsp[0].str);
        }
#line 4359 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 277:
#line 1668 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 4368 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 278:
#line 1674 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            CREATE_STRING((yyval.str),&((yyvsp[0].token_atrib).texto->c_str()[1])); 
            //$$ = new string(&($1.texto->c_str()[1]));
        }
#line 4377 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 279:
#line 1680 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            STRING_TO_VAR(*((yyvsp[0].token_atrib).texto), (yyval.intconst))
        }
#line 4385 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 280:
#line 1685 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            STRING_TO_VAR(*((yyvsp[0].token_atrib).texto), (yyval.floatconst))
        }
#line 4393 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;

  case 281:
#line 1689 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"
        {
            STRING_TO_VAR(*((yyvsp[0].token_atrib).texto), (yyval.floatconst))
        }
#line 4401 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"
    break;


#line 4405 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Bison.gen"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (irtree, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (irtree, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, irtree);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, irtree);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (irtree, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif


/*-----------------------------------------------------.
| yyreturn -- parsing is finished, return the result.  |
`-----------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, irtree);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[+*yyssp], yyvsp, irtree);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 1693 "Implementation/ARBCompilers/FragmentProgram/ACDXFP1Grammar.y"


#include "ACDXFP1Flex.gen" 

int acdxFp1StartParse(void *ptr)
{
    yyparse(ptr);
    
    list<string*>::iterator iter = acdxFp1LexSymbolCollector.begin();
    
    while(iter != acdxFp1LexSymbolCollector.end())
    {
        delete (*iter);
        iter++;
    }
    
    acdxFp1LexSymbolCollector.clear();

    iter = acdxFp1ASTStringCollector.begin();
    
    while(iter != acdxFp1ASTStringCollector.end())
    {   
        delete (*iter);
        iter++;
    }
    
    acdxFp1ASTStringCollector.clear();
    
    return 0;
}
